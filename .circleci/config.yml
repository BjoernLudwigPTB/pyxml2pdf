# Python CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

executors:
  tester:
    working_directory: ~/repo
    parameters:
      tag:
        type: string
        default: "3.10"
    docker:
      - image: cimg/python:<< parameters.tag >>
  publisher:
    working_directory: ~/repo
    docker:
      - image: cimg/python:3.10

commands:
  create_folders_and_venv:
    description: "Prepare everything."
    parameters:
      pyenv:
        type: string
    steps:
    - checkout
    - run:
        name: Create test result folder
        command: |
          mkdir test-results

    - restore_cache:
        keys:
          - << parameters.pyenv >>-dependencies-
              {{checksum "requirements/dev-requirements.txt" }}
              {{ checksum "requirements/requirements.txt" }}
          # Fallback to using the latest cache if no exact match is found.
          - << parameters.pyenv >>-dependencies-

    - run:
        name: Create virtual environment
        command: |
          python3 -m venv << parameters.pyenv >>
          echo 'source << parameters.pyenv >>/bin/activate' >> $BASH_ENV

    - run:
        name: Upgrade pip
        command: |
          pip install --upgrade pip pip-tools
          python -m piptools sync requirements/requirements.txt \ 
            requirements/dev-requirements.txt

  tox:
    description: "Perform tox testing."
    parameters:
      pyenv:
        type: string
        default: "py310"
      posargs:
        type: string
        default: ""
    steps:
    - run: tox -e << parameters.pyenv >> << parameters.posargs >>

  store_results:
    description: "Store test results and artifacts."
    parameters:
      pyenv:
        type: string
    steps:
    - store_artifacts:
        path: test_results
        destination: test_results

    - store_test_results:
        path: test_results

    - save_cache:
        paths:
          - .tox/<< parameters.pyenv >>
        key: >-
          << parameters.pyenv >>-dependencies-
            {{checksum "requirements/dev-requirements.txt" }}
            {{ checksum "requirements/requirements.txt" }}

workflows:
  test_and_deploy:
    jobs:
      - test37
      - test38
      - test39
      - test:
          name: "test_python_3.10"
          tag: "3.10"
          pyenv: "py310"
          posargs: "--cov-report xml --cov=src"
      - semantic-release:
          requires:
              - test37
              - test38
              - test39
              - test_python_3.10
          filters:
              branches:
                only: /master/

jobs:
  test37:
    parameters:
      tag:
        type: string
        default: "3.7"
      pyenv:
        type: string
        default: "py37"

    executor:
      name: tester
      tag: << parameters.pyenv >>

    steps:
      - create_folders_and_venv:
          pyenv: << parameters.pyenv >>
      - tox:
          pyenv: << parameters.pyenv >>
      - store_results:
          pyenv: << parameters.pyenv >>
  test38:
    parameters:
      tag:
        type: string
        default: "3.8"
      pyenv:
        type: string
        default: "py38"

    executor:
      name: tester
      tag: << parameters.pyenv >>

    steps:
      - create_folders_and_venv:
          pyenv: << parameters.pyenv >>
      - tox:
          pyenv: << parameters.pyenv >>
      - store_results:
          pyenv: << parameters.pyenv >>
  test39:
    parameters:
      tag:
        type: string
        default: "3.9"
      pyenv:
        type: string
        default: "py39"

    executor:
      name: tester
      tag: << parameters.pyenv >>

    steps:
      - create_folders_and_venv:
          pyenv: << parameters.pyenv >>
      - tox:
          pyenv: << parameters.pyenv >>
      - store_results:
          pyenv: << parameters.pyenv >>

  test:
    parameters:
      tag:
        type: string
        default: "3.10"
      pyenv:
        type: string
        default: "py310"
      posargs:
        type: string
        default: ""

    executor:
      name: tester
      tag: << parameters.tag >>

    # Call for the execution of some reusable commands specified above and
    # additionally produce coverage reports and send them to the according CI platforms.
    steps:
      - create_folders_and_venv:
          pyenv: << parameters.pyenv >>

      # Install CI blocks dependencies.
      - run:
          name: Install pyxml2pdf, Codacy and Codecov reporter
          command: |
            pip install -e .
            pip install codacy-coverage

      - when:
          condition: << parameters.posargs >>
          steps:
            - run:
                name: Set up Code Climate test-reporter
                command: |
                  curl -L 'https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64' > ./cc-test-reporter
                  chmod +x ./cc-test-reporterr sending coverage reports to code climate.
                  ./cc-test-reporter before-build

      - tox:
          pyenv: << parameters.pyenv >>
          posargs: << parameters.posargs >>

      - when:
          condition: << parameters.posargs >>
          steps:
            - run:
                name: Set up Code Climate test-reporter
                command: |
                  curl -L 'https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64' > ./cc-test-reporter
                  chmod +x ./cc-test-reporter
            - run:
                name: Upload coverage report
                command: |
                  curl -s https://codecov.io/bash > codecov;
                  VERSION=$(grep -o 'VERSION=\"[0-9\.]*\"' codecov | cut -d'"' -f2);
                  for i in 1 256 512
                  do
                    shasum -a $i -c --ignore-missing <(curl -s "https://raw.githubusercontent.com/codecov/codecov-bash/${VERSION}/SHA${i}SUM") ||
                    shasum -a $i -c <(curl -s "https://raw.githubusercontent.com/codecov/codecov-bash/${VERSION}/SHA${i}SUM")
                  done
                  chmod u+x codecov
            - run:
                name: Prepare code climate
                command: |
                  ./cc-test-reporter after-build --coverage-input-type coverage.py \
                      --exit-code $?
                  python-codacy-coverage -r coverage.xml
                  ./codecov
                  mv coverage.xml ./test_results/
                  coverage report -m > test_results/coverage.log

      - store_results:
          pyenv: << parameters.pyenv >>

  # Define the job to run after all tests have passed and release software based on
  # python-semantic-release.
  semantic-release:
    executor: publisher

    steps:
      # Checkout code
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            # Specify the unique identifier for the cache.
            - publisher-dependencies

      # Install dependencies.
      - run:
          name: Install dependencies
          command: |
            python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            pip install python-semantic-release

      - save_cache:
          paths:
            - ./venv
          key: >-
            publisher-dependencies

      # Publish it!
      - run:
          name: Run semantic-release publish
          command: |
            source venv/bin/activate
            git config --global user.name "semantic-release (via CircleCI)"
            git config --global user.email "bjoern.ludwig@ptb.de"
            semantic-release publish
